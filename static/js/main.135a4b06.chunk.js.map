{"version":3,"sources":["components/logo.svg","components/Navbar.jsx","components/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","languageName","c","cpp","java","python","sizeName","14","16","18","20","state","language","fontSize","this","className","id","data-name","xmlns","viewBox","d","transform","DropdownButton","Dropdown","Item","eventKey","title","onSelect","handleFontSize","Button","onClick","handleShareCode","Component","randomIntFromInterval","min","max","Math","floor","random","SortingVisualizer","array","arrayLength","intervalMin","intervalMax","resetArray","i","push","setState","arrayBarStyle","value","height","width","fallbacks","map","idx","key","style","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.135a4b06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4d68cf84.svg\";","import React, { Component } from \"react\";\nimport { Button, DropdownButton, Dropdown } from \"react-bootstrap\";\nimport \"./Navbar.css\";\nimport logo from \"./logo.svg\";\n\nclass Navbar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      language: \"c\",\n      fontSize: \"16\",\n    };\n    // this.props.triggerLanguageUpdate(this.state.language);\n    // this.props.triggerFontSizeUpdate(this.state.fontSize);\n  }\n\n  languageName = {\n    c: \"C (GCC 9.2.0)\",\n    cpp: \"C++ (GCC 9.2.0)\",\n    java: \"Java (OpenJDK 13.0.1)\",\n    python: \"Python (3.8.1)\",\n  };\n\n  sizeName = {\n    14: \"14px\",\n    16: \"16px\",\n    18: \"18px\",\n    20: \"20px\",\n  };\n\n  // handleLanguage = (language) => {\n  //   this.setState({\n  //     language: language,\n  //   });\n  //   this.props.triggerLanguageUpdate(language);\n  // };\n\n  // handleFontSize = (fontSize) => {\n  //   this.setState({\n  //     fontSize: fontSize,\n  //   });\n  //   this.props.triggerFontSizeUpdate(fontSize);\n  // };\n\n  // handleShareCode = () => {\n  //   if (this.props.code) {\n  //     this.props.shareCode();\n  //   } else {\n  //     alert(\"Editor is empty!\");\n  //   }\n  // };\n\n  render() {\n    const { language, fontSize } = this.state;\n    return (\n      <header className=\"IdeNavbar\">\n        <div className=\"logo-wrapper\">\n          <svg id=\"Layer_1\" data-name=\"Layer 1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 184.8 181.79\">\n            <title>pk 192</title>\n            <path d=\"M13.47,85.33v55.38c39,6.57,69.36-17.74,78.71-49.12C97.41,74,96,56.42,87.47,40,79,23.69,65.79,12.46,48.17,6.06h54.5V187.73H6.07v-1.61c0-36.92-.07-73.83.06-110.74,0-5.65,1.15-11.21,4.41-16.09,2.94-4.41,7.12-6.4,12.28-7A18.49,18.49,0,0,1,36.44,56a18,18,0,0,1,7.47,11.71A18.66,18.66,0,0,1,37.27,85.9c-6.41,5.48-14.4,5.89-21.55,1Z\" transform=\"translate(-6.05 -6.06)\" />\n            <path d=\"M179,55.21c-.91,1.86-1.78,3.7-2.7,5.52L160.94,91.08c-1.92,3.78-3.9,7.53-5.79,11.33a2.38,2.38,0,0,0-.07,1.74c3.62,8.55,7.31,17.09,11,25.63q6.59,15.43,13.15,30.86,4.81,11.25,9.68,22.46c.64,1.49,1.25,3,2,4.74h-1.72q-26.08,0-52.16,0c-1,0-1.52-.14-1.92-1.29-2.64-7.59-5.44-15.13-8.16-22.7-4.29-12-8.54-23.93-12.84-35.89-3.06-8.5-6.1-17-9.28-25.47-.57-1.53.07-2.59.62-3.73,2.38-4.89,4.86-9.74,7.28-14.62q4.52-9.12,9-18.27c1.58-3.22,3.06-6.49,4.69-9.69a2.14,2.14,0,0,1,1.54-1q25.32-.07,50.64,0A3.28,3.28,0,0,1,179,55.21Z\" transform=\"translate(-6.05 -6.06)\" />\n          </svg>\n        </div>\n        <p>Pravin Kanna</p>\n        <nav>\n          <ul className=\"NavItems\">\n            <li>\n              <DropdownButton className=\"languageBtn\">\n                <Dropdown.Item className={language === \"c\" ? \"selected\" : \"\"} eventKey=\"c\">\n                  C (GCC 9.2.0)\n                </Dropdown.Item>\n                <Dropdown.Item className={language === \"cpp\" ? \"selected\" : \"\"} eventKey=\"cpp\">\n                  C++ (GCC 9.2.0)\n                </Dropdown.Item>\n                <Dropdown.Item className={language === \"python\" ? \"selected\" : \"\"} eventKey=\"python\">\n                  Python (3.8.1)\n                </Dropdown.Item>\n                <Dropdown.Item className={language === \"java\" ? \"selected\" : \"\"} eventKey=\"java\">\n                  Java (OpenJDK 13.0.1)\n                </Dropdown.Item>\n              </DropdownButton>\n            </li>\n            <li>\n              <DropdownButton className=\"fontSizeBtn\" title={this.sizeName[fontSize]} onSelect={this.handleFontSize}>\n                <Dropdown.Item className={fontSize === \"14\" ? \"selected\" : \"\"} eventKey=\"14\">\n                  14px\n                </Dropdown.Item>\n                <Dropdown.Item className={fontSize === \"16\" ? \"selected\" : \"\"} eventKey=\"16\">\n                  16px\n                </Dropdown.Item>\n                <Dropdown.Item className={fontSize === \"18\" ? \"selected\" : \"\"} eventKey=\"18\">\n                  18px\n                </Dropdown.Item>\n                <Dropdown.Item className={fontSize === \"20\" ? \"selected\" : \"\"} eventKey=\"20\">\n                  20px\n                </Dropdown.Item>\n              </DropdownButton>\n            </li>\n            <li>\n              <Button className=\"share\" onClick={this.handleShareCode}>\n                <i className=\"fas fa-share-alt\"></i>\n              </Button>\n            </li>\n          </ul>\n        </nav>\n      </header>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Navbar from \"./Navbar\";\nimport \"./SortingVisualizer.css\";\n\nclass SortingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      arrayLength: 95,\n      intervalMin: 1,\n      intervalMax: 100,\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    const { arrayLength, intervalMax, intervalMin } = this.state;\n    for (let i = 1; i < arrayLength; i++) {\n      array.push(randomIntFromInterval(intervalMin, intervalMax));\n    }\n    array[randomIntFromInterval(intervalMin, intervalMax)] = intervalMax;\n    this.setState({ array: array });\n  }\n\n  render() {\n    const { array, intervalMax, arrayLength } = this.state;\n    const arrayBarStyle = (value) => {\n      return {\n        height: `${(value / intervalMax) * 100}%`,\n        width: `calc(${(arrayLength - 1) / 90}% - ${5}px)`,\n        fallbacks: [{ width: `-moz-calc(${arrayLength / 90}% - ${5}px)` }, { width: `-webkit-calc(${arrayLength / 90}% - ${5}px)` }, { width: `-o-calc(${arrayLength / 90}% - ${5}px)` }],\n      };\n    };\n    return (\n      <div className=\"SortingVisualizer\">\n        <Navbar className=\"header\" />\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <span className=\"array-bar\" key={idx} style={arrayBarStyle(value)}></span>\n          ))}\n        </div>\n\n        <div className=\"footer\">\n          <Button variant=\"danger\" onClick={() => this.resetArray()}>\n            Reset Array\n          </Button>\n          <Button onClick={() => this.resetArray()}>Bubble sort</Button>\n          <Button onClick={() => this.resetArray()}>Selection sort</Button>\n          <Button onClick={() => this.resetArray()}>Insertion sort</Button>\n          <Button onClick={() => this.resetArray()}>Merge sort</Button>\n          <Button onClick={() => this.resetArray()}>Quick sort</Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;\n","import React, { Component } from 'react'\nimport SortingVisualizer from './components/SortingVisualizer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <SortingVisualizer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}